

* Get pomo set up in emacs
  :LOGBOOK:
  CLOCK: [2020-10-22 Thu 21:14]--[2020-10-22 Thu 21:39] =>  0:25
  :END:


* Fix modeline
  :LOGBOOK:
  CLOCK: [2020-10-23 Fri 14:20]--[2020-10-23 Fri 14:45] =>  0:25
  :END:

Two pieces:
1) put pomodoro and line count first in mode line

* Check that multinomial reduction utils still work
  :LOGBOOK:
  CLOCK: [2020-11-19 Thu 01:37]--[2020-11-19 Thu 02:02] =>  0:25
  :END:
Try test.rkt

Missing car+cdr
 search for source <-- in racket/main
  it is part of srfi/1
Working!

Now write sat solver
 Need to start from formulas
  Should I take these formulas as trees?
   Well there is not some nice field thing, so have to.
 Start unshared, check out unshared.rkt

Unshared starts with ands and xors

Look at nary
 change formula input to take things like x10
  will I have to change the grammar?
  Yes will have to change it
racket@multinomial-reduction-utils.rkt> (tokenize "x0 + x1")

(list
 (token-struct 'VAR "x" #f #f #f #f #f)
 (token-struct 'NUM 0 #f #f #f #f #f)
 (token-struct 'PLUS "+" #f #f #f #f #f)
 (token-struct 'VAR "x" #f #f #f #f #f)
 (token-struct 'NUM 1 #f #f #f #f #f))

Was able to just change the tokenizer regex -- good
 I guess tokenizers can be quite useful when don't want to change the grammar for a small thing

Change interp to read numbers from end of variable
 just have string be first character -- rest number
 but then y0 = x0. Fine, there will only be x.
  reflect this in the tokenizer <-- done
 Now update tests
  Final test cases failing
  try manually
 Well evaluate has not been updated
  actually not sure what is wrong with evaluate
 Also read-mset

 Fixed make-mset <-- see what happens
 interpret is giving the wrong answer
  (multiset (↧ (multiset)) (↥ (multiset)) (↥ (multiset)))
 instead of
  (multiset
  (↥ (multiset (↥ (multiset))))
  (↧ (multiset))
  (↥ (multiset (↥ (multiset (↥ #<⃒>)))))
  (↥ (multiset (↥ (multiset (↥ #<⃒>))))))

 forgot v0 instead of x0
 issue from make-mset through evaluate at end
  now actually fixed make-mset
 now fix read-mset <-- done!

Wrote compile to xor.
 Trying to match '((∧ v0 v1) ∧ v0 v1)

Need to write addition with coeff field size
m1 m2
(multiset-set-frequency empty-multiset (if (>= x 0) (↥ ⃒) (↧ ⃒)) (abs x))

(define (count-in-mset v content)
  (- (multiset-frequency v (↥ content))
     (multiset-frequency v (↧ content))))


(define (add m1 m2)
 (let ([combo (set-union (multiset-unique-elements m1)
                         (multiset-unique-elements m2))])

   (for/multiset ([content uniq-elems])
     (count-in-mset m1 content)
 (if (eq? 0 (modulo (- (multiset-frequency v (↥ content))
                       (multiset-frequency v (↧ content))) 2))
  empty-multiset
  )

Got SAT solver working.
Do some organization and ramdom tests.

Create two separate test files
 mv test.rkt

multi-test, and bool-test
try both files
 multi <-- pass
 bool  <-- pass

Random tree generator
Would like to see plot of formula size v time
Plot of number of variables v time

Made plots, now add labels

After labels, put together slides


